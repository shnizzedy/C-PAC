version: 2
jobs:
  build:
    machine: true
    steps:
      - checkout
      - run:
          name: "Set Python Version"
          command: |
            pyenv install 3.6.3
            pyenv global 3.6.3
      - run:
          name: build-docker
          command: |
            docker build -t fcpindi/c-pac:${CIRCLE_BRANCH//\//_} .
            docker save fcpindi/c-pac:${CIRCLE_BRANCH//\//_} | gzip > cpac-docker-image.tar.gz
          # Persist the specified paths (workspace/echo-output) into the workspace for use in downstream job.
      - run:
          name: local-registry
          command: docker run -d -p 5000:5000 --restart=always --name registry registry:2
      - run:
          name: build-singularity
          command: |
            sudo apt-get update && sudo apt-get install flawfinder squashfs-tools uuid-dev libuuid1 libffi-dev libssl-dev libssl1.0.0 libarchive-dev libgpgme11-dev libseccomp-dev -y
            git clone -b 2.5.2 https://github.com/sylabs/singularity
            cd singularity
            ./autogen.sh
            ./configure --prefix=/usr/local --sysconfdir=/etc
            make
            sudo make install
            cd ..
            docker load < cpac-docker-image.tar.gz
            docker tag fcpindi/c-pac:${CIRCLE_BRANCH//\//_} localhost:5000/fcpindi/c-pac:${CIRCLE_BRANCH//\//_}
            docker push localhost:5000/fcpindi/c-pac:${CIRCLE_BRANCH//\//_}
            SINGULARITY_NOHTTPS=1 singularity build C-PAC-CI.simg docker://localhost:5000/fcpindi/c-pac:${CIRCLE_BRANCH//\//_} 
      - store_artifacts:
          path: cpac-docker-image.tar.gz
      - store_artifacts:
          path: C-PAC-CI.simg
          destination: cpac-singularity-image.simg
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: /home/circleci/
          # Must be relative path from root
          paths: project
  switch-platforms:
    machine: true
    steps:
      - attach_workspace:
          at: /home/circleci/
      - run:
          name: â“ˆ Setting up Singularity
          command: |
            sudo apt-get update && sudo apt-get install flawfinder squashfs-tools uuid-dev libuuid1 libffi-dev libssl-dev libssl1.0.0 libarchive-dev libgpgme11-dev libseccomp-dev -y
            cd singularity
            ./autogen.sh
            ./configure --prefix=/usr/local --sysconfdir=/etc
            make
            sudo make install
            cd ..
      - run:
          name: ðŸ”¬ Starting in Singularity
          command: |
            mkdir outputs
            echo $((RANDOM % 20)) > participant_ndx.txt
            singularity run -H /home/circleci/project -B dev/docker_data:/configs -B CPAC/resources/configs/test_configs:/test_configs C-PAC-CI.simg /home/circleci/project /home/circleci/project/outputs participant --save_working_dir --data_config_file /test_configs/data-test_4-projects_5-subjects.yml --pipeline_file /configs/default_pipeline.yml --n_cpus 1 --mem_gb 12 --participant_ndx $(cat participant_ndx.txt) &
          background: true
      - run:
          name: ðŸ˜´ Sleeping
          command: sleep 1000 && pkill singularity
          no_output_timeout: 5h
          when: always
      - run:
          name: ðŸ”¬ Switching to Docker
          command: |
            docker load < cpac-docker-image.tar.gz
            docker run -i --rm -v /tmp:/tmp -v /home/circleci/project/outputs:/output -v /home/circleci/project/dev/docker_data:/configs -v /home/circleci/project/CPAC/resources/configs/test_configs:/test_configs fcpindi/c-pac:${CIRCLE_BRANCH//\//_} /output /output participant --save_working_dir --data_config_file /test_configs/data-test_4-projects_5-subjects.yml --pipeline_file /configs/default_pipeline.yml --n_cpus 1 --mem_gb 12 --participant_ndx=$(cat participant_ndx.txt)
          no_output_timeout: 5h
          when: always
      - run:
          name: ðŸ–­ Tape Archiving Output Directories
          command: tar -zcvf outputs.tar.gz outputs
          when: always
      - store_artifacts:
          path: outputs.tar.gz
      - store_artifacts:
          path: outputs/crash
      - store_artifacts:
          path: outputs/log

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - switch-platforms:
          requires:
            - build