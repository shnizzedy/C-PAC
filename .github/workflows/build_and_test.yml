# Copyright (C) 2022-2023  C-PAC Developers

# This file is part of C-PAC.

# C-PAC is free software: you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.

# C-PAC is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
# License for more details.

# You should have received a copy of the GNU Lesser General Public
# License along with C-PAC. If not, see <https://www.gnu.org/licenses/>.
name: Build and test C-PAC


on:
  workflow_call:
    inputs:
      phase_one:
        description: 'first phase of staging images to include (OS & data)'
        type: string
        required: true
      phase_two:
        description: 'second phase of staging images to include (dependencies)'
        type: string
        required: true
      phase_three:
        description: 'third phase of staging images to include (base images)'
        type: string
        required: true

jobs:
  Ubuntu:
    name: Build C-PAC stage images for Ubuntu & FSL data
    strategy:
      matrix:
        Dockerfile: ${{ fromJSON(inputs.phase_one) }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out C-PAC
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Clear up some space on runner
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Docker Metadata action
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          flavor:
            suffix=-${{ github.sha }}
          images: ghcr.io/${{ github.repository }}/${{ matrix.Dockerfile }}
          tags: |
            type=ref,event=branch,priority=800
            type=ref,event=pr,priority=799
            type=raw,value=latest,enable={{is_default_branch}},priorty=700
            type=sha,priority=600,onlatest=false
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.2.1
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5.0.0
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=min,compression=zstd
          context: .
          file: .github/Dockerfiles/${{ matrix.Dockerfile }}.Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
  
  stages:
    name: Build C-PAC Docker stage images for dependencies
    needs: Ubuntu
    strategy:
      matrix:
        Dockerfile: ${{ fromJSON(inputs.phase_two) }}
    env:
      REBUILD: ${{ inputs.rebuild_phase_two }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out C-PAC
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Prep Dockerfiles for forked repository
        run: |
            .github/scripts/local_ghcr .github/Dockerfiles/${{ matrix.Dockerfile }}.Dockerfile ${{ github.repository_owner }} $DOCKER_TAG ${{ github.sha }}
            cat .github/Dockerfiles/${{ matrix.Dockerfile }}.Dockerfile
      - name: See Dockerfile
        run: cat .github/Dockerfiles/${{ matrix.Dockerfile }}.Dockerfile
      - name: Clear up some space on runner
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Docker Metadata action
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          flavor:
            suffix=-${{ github.sha }}
          images: ghcr.io/${{ github.repository }}/${{ matrix.Dockerfile }}
          tags: |
            type=ref,event=branch,priority=800
            type=ref,event=pr,priority=799
            type=raw,value=latest,enable={{is_default_branch}},priorty=700
            type=sha,priority=600,onlatest=false
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.2.1
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5.0.0
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=min,compression=zstd
          context: .
          file: .github/Dockerfiles/${{ matrix.Dockerfile }}.Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  build-base:
    name: Build C-PAC base stage images
    needs: stages
    runs-on: ubuntu-latest
    env:
      BUILD_CACHE: /home/runner/.docker/buildkit
    strategy:
      matrix:
        variant: ${{ fromJSON(inputs.phase_three) }}
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@v6
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          overprovision-lvm: 'true'
      - name: Check out C-PAC
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Prep source files
        run: |
            sed -i -e 's/^/\.github\/Dockerfiles\//' .github/stage_requirements/${{ matrix.variant }}.txt
            echo 'dev/docker_data/required_afni_pkgs.txt' >> .github/stage_requirements/${{ matrix.variant }}.txt
            echo '.github/workflows/build_and_test.yml' >> .github/stage_requirements/${{ matrix.variant }}.txt
            echo '.github/stage_requirements/${{ matrix.variant }}.txt' >> .github/stage_requirements/${{ matrix.variant }}.txt
      - name: Prep Dockerfiles for forked repository
        run: |
            .github/scripts/local_ghcr .github/Dockerfiles/base-${{ matrix.variant }}.Dockerfile ${{ github.repository_owner }} $DOCKER_TAG ${{ github.sha }}
            cat .github/Dockerfiles/base-${{ matrix.variant }}.Dockerfile
      - name: See Dockerfile
        run: cat .github/Dockerfiles/base-${{ matrix.variant }}.Dockerfile
      - name: Clear up some space on runner
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Docker Metadata action
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          flavor:
            suffix=-${{ github.sha }}
          images: ghcr.io/${{ github.repository }}/base-${{ matrix.variant }}
          tags: |
            type=ref,event=branch,priority=800
            type=ref,event=pr,priority=799
            type=raw,value=latest,enable={{is_default_branch}},priorty=700
            type=sha,priority=600,onlatest=false
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.2.1
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push base image
        uses: docker/build-push-action@v5.0.0
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=min,compression=zstd
          context: .
          file: .github/Dockerfiles/base-${{ matrix.variant }}.Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false
          push: true
          sbom: false
          tags: ${{ steps.meta.outputs.tags }}

  build-base-standard:
    name: Build C-PAC standard base stage image
    needs: build-base
    runs-on: ubuntu-latest
    env:
      BUILD_CACHE: /home/runner/.docker/buildkit
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@v6
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          overprovision-lvm: 'true'
      - name: Check out C-PAC
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Prep source files
        run: |
            sed -i -e 's/^/\.github\/Dockerfiles\//' .github/stage_requirements/standard.txt
            echo 'dev/docker_data/required_afni_pkgs.txt' >> .github/stage_requirements/standard.txt
            echo '.github/workflows/build_and_test.yml' >> .github/stage_requirements/standard.txt
            echo '.github/stage_requirements/standard.txt' >> .github/stage_requirements/standard.txt
      - name: Prep Dockerfiles for forked repository
        run: |
            .github/scripts/local_ghcr .github/Dockerfiles/base-standard.Dockerfile ${{ github.repository_owner }} $DOCKER_TAG ${{ github.sha }}
            cat .github/Dockerfiles/base-standard.Dockerfile
      - name: See Dockerfile
        run: cat .github/Dockerfiles/base-standard.Dockerfile
      - name: Clear up some space on runner
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Docker Metadata action
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          flavor:
            suffix=-${{ github.sha }}
          images: ghcr.io/${{ github.repository }}/base-standard
          tags: |
            type=ref,event=branch,priority=800
            type=ref,event=pr,priority=799
            type=raw,value=latest,enable={{is_default_branch}},priorty=700
            type=sha,priority=600,onlatest=false
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.2.1
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push base image
        uses: docker/build-push-action@v5.0.0
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=min,compression=zstd
          context: .
          file: .github/Dockerfiles/base-standard.Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false
          push: true
          sbom: false
          tags: ${{ steps.meta.outputs.tags }}

  C-PAC:
    needs: build-base-standard
    uses: ./.github/workflows/build_C-PAC.yml
    with:
      variant: ''

  C-PAC-lite:
    needs: build-base
    uses: ./.github/workflows/build_C-PAC.yml
    with:
      variant: lite

  C-PAC-ABCD-HCP:
    needs: build-base
    uses: ./.github/workflows/build_C-PAC.yml
    with:
      variant: ABCD-HCP

  C-PAC-fMRIPrep-LTS:
    needs: build-base
    uses: ./.github/workflows/build_C-PAC.yml
    with:
      variant: fMRIPrep-LTS

  smoke-tests-participant:
    name: Run participant-level smoke tests
    needs:
      - C-PAC
      - C-PAC-lite
      - C-PAC-ABCD-HCP
      - C-PAC-fMRIPrep-LTS
    if: github.ref_name == 'develop' || github.ref_name == 'main'
    uses: ./.github/workflows/smoke_test_participant.yml

  Circle_tests:
    name: Run tests on CircleCI
    needs:
      - C-PAC
      - C-PAC-lite
      - C-PAC-ABCD-HCP
      - C-PAC-fMRIPrep-LTS
    if: github.ref_type == 'branch'
    runs-on: ubuntu-latest
    steps:
      - name: Check out C-PAC
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Trigger CircleCI tests
        run: |
            echo "ref: $GITHUB_REF_NAME"
            TEXT="Triggered pipeline at "
            U1="https://circleci.com/api/v2/project/gh/${GITHUB_REPOSITORY}/pipeline"
            export DATA="{\"branch\":\"$GITHUB_REF_NAME\", \"parameters\": {\"run_tests\": true}}"
            echo "URL ${U1}"
            echo "data ${DATA}"
            RESPONSE=$(curl \
              --request POST \
              --url "${U1}" \
              -u ${{ secrets.CIRCLE_API_USER_TOKEN }}: \
              --header 'content-type: application/json' \
              --data "${DATA}")
            echo "$RESPONSE"
            PIPELINE_NUMBER=$(echo $RESPONSE |
              jq '.number')
            if [[ $PIPELINE_NUMBER == 'null' ]]
            then
              echo "Failed to trigger CircleCI tests"
              exit 126
            fi
            PIPELINE_ID=$(curl \
              --request GET \
              --url "https://circleci.com/api/v2/project/gh/${GITHUB_REPOSITORY}/pipeline/${PIPELINE_NUMBER}" \
              -u "${{ secrets.CIRCLE_API_USER_TOKEN }}:" |
              jq '.id' |
              tr -d '"')
            # wait for workflow to get an ID
            sleep 20
            WORKFLOW_ID=$(curl \
              --request GET \
              --url "https://circleci.com/api/v2/pipeline/${PIPELINE_ID}/workflow" \
              -u "${{ secrets.CIRCLE_API_USER_TOKEN }}:" |
              jq '.items[0].id' |
              tr -d '"')
            echo ${TEXT}https://app.circleci.com/pipelines/github/${GITHUB_REPOSITORY}/${PIPELINE_NUMBER}/workflows/${WORKFLOW_ID}

  Deploy_to_Docker_Hub:
    name: Deploy to Docker Hub
    needs:
      - C-PAC
    if: github.ref_type == 'tag'
    uses: ./.github/workflows/deploy_to_Docker_Hub.yml
    with:
      variant: ''
    secrets: inherit

  Deploy_to_Docker_Hub-lite:
    name: Deploy 'lite' to Docker Hub
    needs:
      - C-PAC-lite
    if: github.ref_type == 'tag'
    uses: ./.github/workflows/deploy_to_Docker_Hub.yml
    with:
      variant: 'lite'
    secrets: inherit

  Deploy_to_Docker_Hub-ABCD-HCP:
    name: Deploy 'ABCD-HCP' to Docker Hub
    needs:
      - C-PAC-ABCD-HCP
    if: github.ref_type == 'tag'
    uses: ./.github/workflows/deploy_to_Docker_Hub.yml
    with:
      variant: 'ABCD-HCP'
    secrets: inherit

  Deploy_to_Docker_Hub-fMRIPrep-LTS:
    name: Deploy 'fMRIPrep-LTS' to Docker Hub
    needs:
      - C-PAC-fMRIPrep-LTS
    if: github.ref_type == 'tag'
    uses: ./.github/workflows/deploy_to_Docker_Hub.yml
    with:
      variant: 'fMRIPrep-LTS'
    secrets: inherit
